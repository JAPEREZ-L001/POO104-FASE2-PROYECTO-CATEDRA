USE GestionHoteles;
GO

-- SP_CrearReserva: Inserta Reserva + Pago en una TRANSACCIÓN
IF OBJECT_ID('dbo.SP_CrearReserva','P') IS NOT NULL
    DROP PROCEDURE dbo.SP_CrearReserva;
GO

CREATE PROCEDURE dbo.SP_CrearReserva
    @FechaCheckIn DATE,
    @FechaCheckOut DATE,
    @CantidadHuespedes INT,
    @IdHuesped INT,
    @HabitacionId INT,
    @PrecioTotal DECIMAL(10,2),
    @MetodoPago NVARCHAR(50),
    @CodigoConfirmacion NVARCHAR(50) OUTPUT,
    @ReservaId INT OUTPUT,
    @PagoId INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- Opcional: comprobar disponibilidad rápida (simple)
        IF EXISTS (
            SELECT 1 FROM Reservas r
            WHERE r.HabitacionId = @HabitacionId
              AND r.Estado IN ('Confirmada','Pendiente')
              AND NOT (@FechaCheckOut <= r.FechaCheckIn OR @FechaCheckIn >= r.FechaCheckOut)
        )
        BEGIN
            THROW 51001, 'La habitación no está disponible en las fechas solicitadas.', 1;
        END

        -- Generar código confirmación (GUID corto)
        DECLARE @guid UNIQUEIDENTIFIER = NEWID();
        SET @CodigoConfirmacion = LEFT(REPLACE(CONVERT(NVARCHAR(36), @guid), '-', ''), 12);

        -- Insertar Reserva
        INSERT INTO Reservas (CodigoConfirmacion, FechaCheckIn, FechaCheckOut, CantidadHuespedes, PrecioTotal, Estado, FechaReserva, IdHuesped, HabitacionId)
        VALUES (@CodigoConfirmacion, @FechaCheckIn, @FechaCheckOut, @CantidadHuespedes, @PrecioTotal, 'Confirmada', SYSDATETIME(), @IdHuesped, @HabitacionId);

        SET @ReservaId = SCOPE_IDENTITY();

        -- Insertar Pago inicial (se puede ser 'Pendiente' o 'Completado' según integración)
        INSERT INTO Pagos (Monto, MetodoPago, Estado, FechaPago, ReservaId)
        VALUES (@PrecioTotal, @MetodoPago, 'Pendiente', SYSDATETIME(), @ReservaId);

        SET @PagoId = SCOPE_IDENTITY();

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF XACT_STATE() <> 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorNumber INT = ERROR_NUMBER();
        THROW @ErrorNumber, @ErrorMessage, 1;
    END CATCH
END
GO

--------------

-- SP_CancelarReserva: marca reserva como Cancelada y reembolsa si aplica
IF OBJECT_ID('dbo.SP_CancelarReserva','P') IS NOT NULL
    DROP PROCEDURE dbo.SP_CancelarReserva;
GO

CREATE PROCEDURE dbo.SP_CancelarReserva
    @ReservaId INT
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- Verificar que existe
        IF NOT EXISTS (SELECT 1 FROM Reservas WHERE IdReserva = @ReservaId)
        BEGIN
            THROW 51002, 'Reserva no encontrada.', 1;
        END

        -- Actualizar estado de reserva
        UPDATE Reservas
        SET Estado = 'Cancelada'
        WHERE IdReserva = @ReservaId;

        -- Si hay pago y está completado, marcar como reembolsado
        IF EXISTS (SELECT 1 FROM Pagos WHERE ReservaId = @ReservaId AND Estado = 'Completado')
        BEGIN
            UPDATE Pagos
            SET Estado = 'Reembolsado'
            WHERE ReservaId = @ReservaId AND Estado = 'Completado';
        END

        -- Si hay pago pendiente o fallido, puedes decidir dejarlo o marcar aparte (no lo altero)
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF XACT_STATE() <> 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorNumber INT = ERROR_NUMBER();
        THROW @ErrorNumber, @ErrorMessage, 1;
    END CATCH
END
GO
